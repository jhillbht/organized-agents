#!/bin/bash

# Organized AI Quickstart Script
# This script sets up and runs Organized AI with minimal user input

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

# ASCII Art Banner
echo "
╔══════════════════════════════════════════════╗
║     ___                       _              ║
║    / _ \ _ __ __ _  __ _ _ __(_)_______  __| ║
║   | | | | '__/ _\` |/ _\` | '_ \| |_  / _ \/ _\` |
║   | |_| | | | (_| | (_| | | | | |/ /  __/ (_| |
║    \___/|_|  \__, |\__,_|_| |_|_/___\___|\__,_|
║              |___/                            ║
║              AI Agent Orchestration           ║
╚══════════════════════════════════════════════╝
"

echo "Welcome to Organized AI Quickstart!"
echo "This script will set up everything you need."
echo ""

# Check OS
OS="Unknown"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macOS"
elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
    print_error "Please use quickstart.bat for Windows"
    exit 1
fi

print_status "Detected OS: $OS"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check for Git
if command_exists git; then
    print_status "Git is installed"
else
    print_error "Git is not installed"
    echo "Please install Git from: https://git-scm.com/"
    exit 1
fi

# Check for Rust
if command_exists rustc; then
    RUST_VERSION=$(rustc --version | awk '{print $2}')
    print_status "Rust is installed (version $RUST_VERSION)"
else
    print_warning "Rust is not installed"
    echo "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source "$HOME/.cargo/env"
    print_status "Rust installed successfully"
fi

# Check for Node.js or Bun
PACKAGE_MANAGER=""
if command_exists bun; then
    PACKAGE_MANAGER="bun"
    print_status "Bun is installed"
elif command_exists node; then
    NODE_VERSION=$(node --version)
    print_status "Node.js is installed (version $NODE_VERSION)"
    PACKAGE_MANAGER="npm"
    
    # Offer to install Bun for better performance
    echo ""
    read -p "Would you like to install Bun for better performance? (y/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        curl -fsSL https://bun.sh/install | bash
        export BUN_INSTALL="$HOME/.bun"
        export PATH="$BUN_INSTALL/bin:$PATH"
        PACKAGE_MANAGER="bun"
        print_status "Bun installed successfully"
    fi
else
    print_warning "Neither Node.js nor Bun is installed"
    echo "Installing Bun..."
    curl -fsSL https://bun.sh/install | bash
    export BUN_INSTALL="$HOME/.bun"
    export PATH="$BUN_INSTALL/bin:$PATH"
    PACKAGE_MANAGER="bun"
    print_status "Bun installed successfully"
fi

# Check for Claude Code CLI (optional)
if command_exists claude; then
    print_status "Claude Code CLI is installed"
else
    print_warning "Claude Code CLI not found (optional)"
    echo "Install from: https://github.com/anthropics/claude-code"
fi

echo ""
echo "Installing Organized AI..."
echo ""

# Install dependencies
print_status "Installing dependencies with $PACKAGE_MANAGER..."
if [ "$PACKAGE_MANAGER" = "bun" ]; then
    bun install
else
    npm install
fi

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    print_status "Creating .env file..."
    cat > .env << EOF
# Organized AI Environment Configuration
# Generated by quickstart.sh

# Required: Your Anthropic API key
ANTHROPIC_API_KEY=

# Optional: Additional API keys
# OPENAI_API_KEY=
# GOOGLE_API_KEY=

# Optional: Custom data directory (defaults to ~/.organized-ai)
# ORGANIZED_AI_DATA_DIR=~/.organized-ai
EOF
    print_warning ".env file created. Please add your API keys!"
fi

# Check if API key is set
if grep -q "ANTHROPIC_API_KEY=$" .env || grep -q "ANTHROPIC_API_KEY= *$" .env; then
    echo ""
    print_error "ANTHROPIC_API_KEY is not set in .env file"
    echo "Please edit .env and add your Anthropic API key"
    echo ""
    read -p "Would you like to add it now? (y/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Enter your Anthropic API key: " api_key
        if [[ "$OS" == "macOS" ]]; then
            sed -i '' "s/ANTHROPIC_API_KEY=.*/ANTHROPIC_API_KEY=$api_key/" .env
        else
            sed -i "s/ANTHROPIC_API_KEY=.*/ANTHROPIC_API_KEY=$api_key/" .env
        fi
        print_status "API key saved to .env"
    else
        echo "Please add your API key to .env before running the app"
        exit 1
    fi
fi

echo ""
echo "Setup complete! 🎉"
echo ""
echo "Choose an option:"
echo "1) Run in development mode (recommended for first time)"
echo "2) Build for production"
echo "3) Exit"
echo ""
read -p "Enter your choice (1-3): " choice

case $choice in
    1)
        print_status "Starting Organized AI in development mode..."
        echo ""
        echo "The app will open in a new window shortly..."
        echo "Press Ctrl+C to stop the development server"
        echo ""
        if [ "$PACKAGE_MANAGER" = "bun" ]; then
            bun run tauri dev
        else
            npm run tauri:dev
        fi
        ;;
    2)
        print_status "Building Organized AI for production..."
        echo "This may take several minutes..."
        if [ "$PACKAGE_MANAGER" = "bun" ]; then
            bun run tauri build
        else
            npm run tauri:build
        fi
        echo ""
        print_status "Build complete!"
        echo "The app is located in: src-tauri/target/release/"
        if [[ "$OS" == "macOS" ]]; then
            echo "macOS app bundle: src-tauri/target/release/bundle/macos/Organized AI.app"
        fi
        ;;
    3)
        echo "Setup complete. Run 'bun run tauri dev' to start the app."
        ;;
    *)
        print_error "Invalid choice"
        exit 1
        ;;
esac